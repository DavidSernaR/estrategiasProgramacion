package algoritmosVoraces;

class Arista {
	int origen, destino, peso;

	public Arista(int origen, int destino, int peso) {
		this.origen = origen;
		this.destino = destino;
		this.peso = peso;
	}
}

public class Ejercicio25 {
	
	public static int[] conjunto;
	
	public static void inicializarConjunto(int n) {
		conjunto = new int[n];
		for (int i = 0; i < n; i++) {
			conjunto[i] = i;
		}
	}
	
	public static int encontrar(int nodo) {
		if (conjunto[nodo] != nodo) {
			conjunto[nodo] = encontrar(conjunto[nodo]);
		}
		return conjunto[nodo];
	}
	
	public static void unir(int nodo1, int nodo2) {
        int raiz1 = encontrar(nodo1);
        int raiz2 = encontrar(nodo2);
        if (raiz1 != raiz2) {
            conjunto[raiz2] = raiz1;
        }
    }
	
	public static Arista[] kruskal(int n, Arista[] aristas) {
		
        inicializarConjunto(n);

        for (int i = 0; i < aristas.length-1; i++) {
			for (int j = 0; j < aristas.length-i-1; j++) {
				if (aristas[i].peso > aristas[j].peso) {
                    Arista temp = aristas[i];
                    aristas[i] = aristas[j];
                    aristas[j] = temp;
                }
			}
		}

        Arista[] arbolExpansion = new Arista[n - 1];
        int contadorAristas = 0;

        for (Arista arista : aristas) {
            if (encontrar(arista.origen) != encontrar(arista.destino)) {
                arbolExpansion[contadorAristas++] = arista; 
                unir(arista.origen, arista.destino);

                if (contadorAristas == n - 1) {
                    break;
                }
            }
        }
        return arbolExpansion;
    }

	public static void main(String[] args) {
		
	}

}
