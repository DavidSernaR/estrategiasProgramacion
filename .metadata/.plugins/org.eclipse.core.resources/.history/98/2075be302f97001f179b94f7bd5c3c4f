package algoritmosVoraces;

class Conexion {
    int municipio1, municipio2, costo;

    public Conexion(int municipio1, int municipio2, int costo) {
        this.municipio1 = municipio1;
        this.municipio2 = municipio2;
        this.costo = costo;
    }
}

public class Ejercicio25 {
	
	   public static int[] conjunto;

	    public static void inicializarConjunto(int n) {
	        conjunto = new int[n];
	        for (int i = 0; i < n; i++) {
	            conjunto[i] = i;
	        }
	    }

	    public static int encontrar(int municipio) {
	        if (conjunto[municipio] != municipio) {
	            conjunto[municipio] = encontrar(conjunto[municipio]);
	        }
	        return conjunto[municipio];
	    }

	    public static void unir(int municipio1, int municipio2) {
	        int raiz1 = encontrar(municipio1);
	        int raiz2 = encontrar(municipio2);
	        if (raiz1 != raiz2) {
	            conjunto[raiz2] = raiz1;
	        }
	    }

	    public static Conexion[] kruskal(int n, Conexion[] conexiones) {
	        inicializarConjunto(n);

	        // Ordenar las conexiones por costo
	        for (int i = 0; i < conexiones.length - 1; i++) {
	            for (int j = 0; j < conexiones.length - i - 1; j++) {
	                if (conexiones[i].costo > conexiones[j].costo) {
	                    Conexion temp = conexiones[i];
	                    conexiones[i] = conexiones[j];
	                    conexiones[j] = temp;
	                }
	            }
	        }

	        Conexion[] redOptima = new Conexion[n - 1];
	        int contadorConexiones = 0;

	        for (Conexion conexion : conexiones) {
	            if (encontrar(conexion.municipio1) != encontrar(conexion.municipio2)) {
	                redOptima[contadorConexiones++] = conexion;
	                unir(conexion.municipio1, conexion.municipio2);

	                if (contadorConexiones == n - 1) {
	                    break;
	                }
	            }
	        }
	        return redOptima;
	    }

	public static void main(String[] args) {
		  int municipios = 5; // Número de municipios
	        Conexion[] conexiones = {
	            new Conexion(0, 1, 10000), // Costo de conexión entre municipio 0 y 1
	            new Conexion(0, 2, 30000), // Costo de conexión entre municipio 0 y 2
	            new Conexion(1, 2, 20000), // Costo de conexión entre municipio 1 y 2
	            new Conexion(1, 3, 25000), // Costo de conexión entre municipio 1 y 3
	            new Conexion(2, 3, 15000), // Costo de conexión entre municipio 2 y 3
	            new Conexion(3, 4, 20000)  // Costo de conexión entre municipio 3 y 4
	        };

	        Ejercicio25.inicializarConjunto(municipios);
	        Conexion[] redOptima = Ejercicio25.kruskal(municipios, conexiones);
	        System.out.println("Conexiones en la red de fibra óptica mínima:");
	        for (Conexion conexion : redOptima) {
	            System.out.println("Municipio " + conexion.municipio1 + " - Municipio " + conexion.municipio2 + " con costo " + conexion.costo + " pesos colombianos");
	        }
	}
}
